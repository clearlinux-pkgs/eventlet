From 530e8b8c989acbd75162231edaaf7a2cef440e73 Mon Sep 17 00:00:00 2001
From: Gabriel Briones Sayeg <gabriel.briones.sayeg@intel.com>
Date: Thu, 20 Aug 2015 18:14:27 -0500
Subject: [PATCH] Logging speedy

Signed-off-by: Gabriel Briones Sayeg <gabriel.briones.sayeg@intel.com>
---
 eventlet/wsgi.py | 14 +++++++++++++-
 1 file changed, 13 insertions(+), 1 deletion(-)

diff --git a/eventlet/wsgi.py b/eventlet/wsgi.py
index 7258277..63f6dc7 100644
--- a/eventlet/wsgi.py
+++ b/eventlet/wsgi.py
@@ -15,6 +15,8 @@ from eventlet.support import six
 
 from eventlet.support.six.moves import urllib
 
+from oslo_log import log as logging
+LOG = logging.getLogger(__name__)
 
 DEFAULT_MAX_SIMULTANEOUS_REQUESTS = 1024
 DEFAULT_MAX_HTTP_VERSION = 'HTTP/1.1'
@@ -626,7 +628,7 @@ class Server(BaseHTTPServer.HTTPServer):
                  debug=True,
                  socket_timeout=None,
                  capitalize_response_headers=True):
-
+        LOG.debug("0Speedy Gonzalez")
         self.outstanding_requests = 0
         self.socket = socket
         self.address = address
@@ -655,8 +657,10 @@ class Server(BaseHTTPServer.HTTPServer):
  HTTP headers names are case-insensitive per RFC standard.
  Most likely, you need to fix HTTP parsing in your client software.""",
                           DeprecationWarning, stacklevel=3)
+        LOG.debug("1Speedy Gonzalez")
 
     def get_environ(self):
+        LOG.debug("0Speedy Gonzalez")
         d = {
             'wsgi.errors': sys.stderr,
             'wsgi.version': (1, 0),
@@ -671,12 +675,14 @@ class Server(BaseHTTPServer.HTTPServer):
             d['HTTPS'] = 'on'
         if self.environ is not None:
             d.update(self.environ)
+        LOG.debug("1Speedy Gonzalez")
         return d
 
     def process_request(self, sock_params):
         # The actual request handling takes place in __init__, so we need to
         # set minimum_chunk_size before __init__ executes and we don't want to modify
         # class variable
+        LOG.debug("0Speedy Gonzalez")
         sock, address = sock_params
         proto = new(self.protocol)
         if self.minimum_chunk_size is not None:
@@ -689,10 +695,13 @@ class Server(BaseHTTPServer.HTTPServer):
             sock.close()
             # similar to logging "accepted" in server()
             self.log.debug('(%s) timed out %r' % (self.pid, address))
+        LOG.debug("1Speedy Gonzalez")
 
     def log_message(self, message):
+        LOG.debug("0Speedy Gonzalez")
         warnings.warn('server.log_message is deprecated.  Please use server.log.info instead')
         self.log.info(message)
+        LOG.debug("1Speedy Gonzalez")
 
 
 try:
@@ -781,6 +790,7 @@ def server(sock, site,
     :param capitalize_response_headers: Normalize response headers' names to Foo-Bar.
                 Default is True.
     """
+    LOG.debug("0Speedy Gonzalez")
     serv = Server(sock, sock.getsockname(),
                   site, log,
                   environ=environ,
@@ -834,6 +844,7 @@ def server(sock, site,
                     pool.execute_async(serv.process_request, client_socket)
             except ACCEPT_EXCEPTIONS as e:
                 if support.get_errno(e) not in ACCEPT_ERRNO:
+                    LOG.debug("1Speedy Gonzalez")
                     raise
             except (KeyboardInterrupt, SystemExit):
                 serv.log.info("wsgi exiting")
@@ -852,3 +863,4 @@ def server(sock, site,
         except socket.error as e:
             if support.get_errno(e) not in BROKEN_SOCK:
                 traceback.print_exc()
+    LOG.debug("1Speedy Gonzalez")
-- 
2.1.0

